{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_1",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "203d116ac1ada67169f3e7f10b6e062d94379a48",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1000
                },
                "2": {
                    "data": {
                        "action": "post data",
                        "actionType": "generic",
                        "advanced": {
                            "join": []
                        },
                        "connector": "HTTP",
                        "connectorConfigs": [
                            "http"
                        ],
                        "connectorId": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "post_data_1",
                        "id": "2",
                        "parameters": {
                            "body": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "{\n  \"sender\": \"string\",\n  \"receiver\": \"string\",\n  \"url\": \"https://siuvipprono1siucapvutruthienhahemattroi.com.vn.net/asf/asf/asf/asfsaf/?123.asf\"\n}"
                            },
                            "headers": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "{\n\"accept\": \"application/json\"\n}"
                            },
                            "location": {
                                "functionId": 1,
                                "parameters": [],
                                "template": "/send-msteam/email-alert/fail-scan"
                            }
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "body"
                            },
                            {
                                "data_type": "string",
                                "field": "location"
                            },
                            {
                                "data_type": "boolean",
                                "field": "verify_certificate"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "action",
                    "x": 960,
                    "y": 620
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.2.88192"
    },
    "create_time": "2023-06-23T05:47:43.733710+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}