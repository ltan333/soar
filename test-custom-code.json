{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_1",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "3c3e9166b46f8b40d47f2db6bee8098797995ca9",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 660
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "Call API Message",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "call_api_message",
                        "id": "2",
                        "inputParameters": [
                            "artifact:*.cef.destinationUserName",
                            "artifact:*.cef.deviceCustomString1"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    import requests\n    api=f\"http://192.168.232.7:3334/send-msteam/alert/{container_artifact_cef_item_1}/{container_artifact_cef_item_0}\"\n    header = {\n        'Content-Type': 'application/json; charset=UTF-8'\n        }\n    data={}\n    rs = requests.get(api,headers=header,data=data)\n    rsj=rs.json()\n    print(rs.status_code)\n    print(rs.content)\n    print(rs.raw)\n    print(rs.text)\n\n",
                    "x": 980,
                    "y": 560
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.2.88192"
    },
    "create_time": "2023-06-22T03:36:41.042217+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}